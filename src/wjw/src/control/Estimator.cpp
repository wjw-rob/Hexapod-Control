 
#include "control/Estimator.h"
#include "common/mathTools.h"
#include "common/enumClass.h"
#include "interface/IOROS.h"
// Estimator::Estimator(QuadrupedRobot *robotModel, LowlevelState* lowState, 
//                      VecInt4 *contact, Vec4 *phase, double dt, Vec18 Qdig,
//                      std::string testName)
//           :_robModel(robotModel), _lowState(lowState), _contact(contact),
//            _phase(phase), _dt(dt), _Qdig(Qdig), _estName(testName){

//     _initSystem();
// }

Estimator::Estimator(/*QuadrupedRobot *robotModel, */HexapodRobot *sixlegdogModel, LowlevelState* lowState, 
                     VecInt6 *contact, Vec6 *phase, double dt)
          :/*_robModel(robotModel), */_sixlegdogModel(sixlegdogModel), _lowState(lowState), _contact(contact), 
           _phase(phase), _dt(dt){

    for(int i(0); i<_Qdig.rows(); ++i){
        if(i < 3){
            _Qdig(i) = 0.0003;
        }
        else if(i < 6){
            _Qdig(i) = 0.0003;
        }
        else{
            _Qdig(i) = 0.01;
        }
    }

    _estName = "current";

    accOffset.setZero();
    postionOffset.setZero();
    // _Qdig(5) = 1; //lcc
    _initSystem();

    body_est_vel.setZero();
    _posBody_estByVelBody.setZero();
}

Estimator::~Estimator(){
}

void Estimator::_initSystem(){
    _g << 0, 0, -9.81;
    _largeVariance = 100;

    _xhat.setZero();
    _u.setZero();
    _A.setZero();

    // _A.block(0, 0, 3, 3) = I3;
    // _A.block(0, 3, 3, 3) = I3 * _dt;
    // _A.block(3, 3, 3, 3) = I3;
    // _A.block(6, 6, 12, 12) = I12;

    _A.block(0, 3, 3, 3) = I3 * _dt;
    Eigen::Matrix<double, 24, 24> I_A;
    I_A.setIdentity();
    _A = _A + I_A;

    _B.setZero();
    _B.block(3, 0, 3, 3) = I3 * _dt;

    _C.setZero();
    _C.block(0, 0, 3, 3) = -I3;
    _C.block(3, 0, 3, 3) = -I3;
    _C.block(6, 0, 3, 3) = -I3;
    _C.block(9, 0, 3, 3) = -I3;
    _C.block(12, 0, 3, 3) = -I3;
    _C.block(15, 0, 3, 3) = -I3;
    _C.block(0, 6, 18, 18) = I18;

    _C.block(18, 3, 3, 3) = -I3;
    _C.block(21, 3, 3, 3) = -I3;
    _C.block(24, 3, 3, 3) = -I3;
    _C.block(27, 3, 3, 3) = -I3;
    _C.block(30, 3, 3, 3) = -I3;
    _C.block(33, 3, 3, 3) = -I3;
    _C(36, 8) = 1;
    _C(37, 11) = 1;
    _C(38, 14) = 1;
    _C(39, 17) = 1;
    _C(40, 20) = 1;
    _C(41, 23) = 1;


    _P.setIdentity();
    _P = _largeVariance * _P;

    // // _RInit <<  0.008 , 0.012 ,-0.000 ,-0.009 , 0.012 , 0.000 , 0.009 ,-0.009 ,-0.000 ,-0.009 ,-0.009 , 0.000 ,-0.000 , 0.000 ,-0.000 , 0.000 ,-0.000 ,-0.001 ,-0.002 , 0.000 ,-0.000 ,-0.003 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,
    // //            0.012 , 0.019 ,-0.001 ,-0.014 , 0.018 ,-0.000 , 0.014 ,-0.013 ,-0.000 ,-0.014 ,-0.014 , 0.001 ,-0.001 , 0.001 ,-0.001 , 0.000 , 0.000 ,-0.001 ,-0.003 , 0.000 ,-0.001 ,-0.004 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,
    // //            -0.000, -0.001,  0.001,  0.001, -0.001,  0.000, -0.000,  0.000, -0.000,  0.001,  0.000, -0.000,  0.000, -0.000,  0.000,  0.000, -0.000, -0.000,  0.000, -0.000, -0.000, -0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
    // //            -0.009, -0.014,  0.001,  0.010, -0.013,  0.000, -0.010,  0.010,  0.000,  0.010,  0.010, -0.000,  0.001,  0.000,  0.000,  0.001, -0.000,  0.001,  0.002, -0.000,  0.000,  0.003,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000,
    // //            0.012 , 0.018 ,-0.001 ,-0.013 , 0.018 ,-0.000 , 0.013 ,-0.013 ,-0.000 ,-0.013 ,-0.013 , 0.001 ,-0.001 , 0.000 ,-0.001 , 0.000 , 0.001 ,-0.001 ,-0.003 , 0.000 ,-0.001 ,-0.004 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,
    // //            0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 , 0.001 , 0.000 , 0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 , 0.000 ,-0.000 , 0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 ,-0.000 ,-0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000,
    // //            0.009 , 0.014 ,-0.000 ,-0.010 , 0.013 , 0.000 , 0.010 ,-0.010 ,-0.000 ,-0.010 ,-0.010 , 0.000 ,-0.001 , 0.000 ,-0.001 , 0.000 ,-0.000 ,-0.001 ,-0.001 , 0.000 ,-0.000 ,-0.003 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,
    // //            -0.009, -0.013,  0.000,  0.010, -0.013,  0.000, -0.010,  0.009,  0.000,  0.010,  0.010, -0.000,  0.001, -0.000,  0.000, -0.000,  0.000,  0.001,  0.002,  0.000,  0.000,  0.003,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000,
    // //            -0.000, -0.000, -0.000,  0.000, -0.000, -0.000, -0.000,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000, -0.000,  0.000, -0.000,  0.000, -0.000,  0.000, -0.000,  0.000,  0.000, -0.000, -0.000,  0.000,  0.000,  0.000,  0.000,
    // //            -0.009, -0.014,  0.001,  0.010, -0.013,  0.000, -0.010,  0.010,  0.000,  0.010,  0.010, -0.000,  0.001,  0.000,  0.000, -0.000, -0.000,  0.001,  0.002, -0.000,  0.000,  0.003,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000,
    // //            -0.009, -0.014,  0.000,  0.010, -0.013,  0.000, -0.010,  0.010,  0.000,  0.010,  0.010, -0.000,  0.001, -0.000,  0.000, -0.000,  0.000,  0.001,  0.002, -0.000,  0.000,  0.003,  0.001,  0.001,  0.000,  0.000,  0.000,  0.000,
    // //            0.000 , 0.001 ,-0.000 ,-0.000 , 0.001 ,-0.000 , 0.000 ,-0.000 , 0.000 ,-0.000 ,-0.000 , 0.001 , 0.000 ,-0.000 ,-0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000,
    // //            -0.000, -0.001,  0.000,  0.001, -0.001, -0.000, -0.001,  0.001,  0.000,  0.001,  0.001,  0.000,  1.708,  0.048,  0.784,  0.062,  0.042,  0.053,  0.077,  0.001, -0.061,  0.046, -0.019, -0.029,  0.000,  0.000,  0.000,  0.000,
    // //            0.000 , 0.001 ,-0.000 , 0.000 , 0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 , 0.000 ,-0.000 ,-0.000 , 0.048 , 5.001 ,-1.631 ,-0.036 , 0.144 , 0.040 , 0.036 , 0.016 ,-0.051 ,-0.067 ,-0.024 ,-0.005 , 0.000 , 0.000 , 0.000 , 0.000,
    // //            -0.000, -0.001,  0.000,  0.000, -0.001, -0.000, -0.001,  0.000,  0.000,  0.000,  0.000, -0.000,  0.784, -1.631,  1.242,  0.057, -0.037,  0.018,  0.034, -0.017, -0.015,  0.058, -0.021, -0.029,  0.000,  0.000,  0.000,  0.000,
    // //            0.000 , 0.000 , 0.000 , 0.001 , 0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 ,-0.000 ,-0.000 ,-0.000 , 0.062 ,-0.036 , 0.057 , 6.228 ,-0.014 , 0.932 , 0.059 , 0.053 ,-0.069 , 0.148 , 0.015 ,-0.031 , 0.000 , 0.000 , 0.000 , 0.000,
    // //            -0.000,  0.000, -0.000, -0.000,  0.001,  0.000, -0.000,  0.000,  0.000, -0.000,  0.000,  0.000,  0.042,  0.144, -0.037, -0.014,  3.011,  0.986,  0.076,  0.030, -0.052, -0.027,  0.057,  0.051,  0.000,  0.000,  0.000,  0.000,
    // //            -0.001, -0.001, -0.000,  0.001, -0.001,  0.000, -0.001,  0.001, -0.000,  0.001,  0.001,  0.000,  0.053,  0.040,  0.018,  0.932,  0.986,  0.885,  0.090,  0.044, -0.055,  0.057,  0.051, -0.003,  0.000,  0.000,  0.000,  0.000,
    // //            -0.002, -0.003,  0.000,  0.002, -0.003, -0.000, -0.001,  0.002,  0.000,  0.002,  0.002, -0.000,  0.077,  0.036,  0.034,  0.059,  0.076,  0.090,  6.230,  0.139,  0.763,  0.013, -0.019, -0.024,  0.000,  0.000,  0.000,  0.000,
    // //            0.000 , 0.000 ,-0.000 ,-0.000 , 0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 ,-0.000 , 0.000 , 0.001 , 0.016 ,-0.017 , 0.053 , 0.030 , 0.044 , 0.139 , 3.130 ,-1.128 ,-0.010 , 0.131 , 0.018 , 0.000 , 0.000 , 0.000 , 0.000,
    // //            -0.000, -0.001, -0.000,  0.000, -0.001, -0.000, -0.000,  0.000,  0.000,  0.000,  0.000,  0.000, -0.061, -0.051, -0.015, -0.069, -0.052, -0.055,  0.763, -1.128,  0.866, -0.022, -0.053,  0.007,  0.000,  0.000,  0.000,  0.000,
    // //            -0.003, -0.004, -0.000,  0.003, -0.004, -0.000, -0.003,  0.003,  0.000,  0.003,  0.003,  0.000,  0.046, -0.067,  0.058,  0.148, -0.027,  0.057,  0.013, -0.010, -0.022,  2.437, -0.102,  0.938,  0.000,  0.000,  0.000,  0.000,
    // //            -0.000, -0.000,  0.000,  0.000, -0.000,  0.000, -0.000,  0.000, -0.000,  0.000,  0.001,  0.000, -0.019, -0.024, -0.021,  0.015,  0.057,  0.051, -0.019,  0.131, -0.053, -0.102,  4.944,  1.724,  0.000,  0.000,  0.000,  0.000,
    // //            -0.001, -0.001,  0.000,  0.001, -0.001,  0.000, -0.001,  0.001, -0.000,  0.001,  0.001,  0.000, -0.029, -0.005, -0.029, -0.031,  0.051, -0.003, -0.024,  0.018,  0.007,  0.938,  1.724,  1.569,  0.000,  0.000,  0.000,  0.000,
    // //            0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0 , 0.000 , 0.000 , 0.000,
    // //            0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0 , 0.000 , 0.000,
    // //            0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0 , 0.000,
    // //            0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0;
    // // /* A1 Worked */
    // // _Cu <<   268.573,  -43.819, -147.211,
    // //         -43.819 ,  92.949 ,  58.082,
    // //         -147.211,   58.082,  302.120;
    // // _QInit = _Qdig.asDiagonal();
    // // _QInit +=  _B * _Cu * _B.transpose();// 参考书本(7.83)


    // /* --------------------------lcc:start -------------------------- */
    _RInit.setZero();
//     _RInit <<
//  0.9360,  1.0121, -0.0003, -0.8546,  1.0897, -0.0001,  0.8973, -0.0303,  0.0002, -0.8843,  0.0329,  0.0001,  0.8522, -1.0890, -0.0001, -0.9342, -1.0164, -0.0002, -0.0021,  0.0055,  0.0031, -0.0014, -0.0056,  0.0013,  0.0003,  0.0024,  0.0021,  0.0007, -0.0039,  0.0013,  0.0050,  0.0048,  0.0012,  0.0047, -0.0053, -0.0007,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  1.0121,  1.1084, -0.0002, -0.9329,  1.1784, -0.0001,  0.9745, -0.0304,  0.0001, -0.9619,  0.0317,  0.0000,  0.9318, -1.1781, -0.0001, -1.0106, -1.1111, -0.0001, -0.0005,  0.0032,  0.0037, -0.0000, -0.0029,  0.0009,  0.0009,  0.0014,  0.0027,  0.0011, -0.0026,  0.0020,  0.0032,  0.0026,  0.0016,  0.0031, -0.0027, -0.0012,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0003, -0.0002,  0.0000,  0.0002, -0.0003,  0.0000, -0.0002,  0.0000, -0.0000,  0.0002, -0.0000, -0.0000, -0.0002,  0.0003,  0.0000,  0.0003,  0.0002,  0.0000,  0.0000, -0.0002, -0.0005,  0.0000, -0.0001,  0.0005,  0.0000, -0.0001, -0.0005,  0.0000,  0.0001, -0.0005, -0.0000, -0.0002, -0.0005, -0.0000, -0.0001,  0.0004,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.8546, -0.9329,  0.0002,  0.7858, -0.9950,  0.0001, -0.8219,  0.0262, -0.0001,  0.8109, -0.0276, -0.0000, -0.7845,  0.9946,  0.0001,  0.8532,  0.9356,  0.0001,  0.0008, -0.0032, -0.0027,  0.0003,  0.0032, -0.0012, -0.0007, -0.0013, -0.0018, -0.0009,  0.0025, -0.0012, -0.0032, -0.0027, -0.0009, -0.0031,  0.0030,  0.0006,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  1.0897,  1.1784, -0.0003, -0.9950,  1.2688, -0.0002,  1.0447, -0.0353,  0.0002, -1.0295,  0.0383,  0.0001,  0.9922, -1.2680, -0.0002, -1.0876, -1.1833, -0.0002, -0.0025,  0.0066,  0.0041, -0.0017, -0.0064,  0.0011,  0.0004,  0.0030,  0.0029,  0.0008, -0.0047,  0.0020,  0.0058,  0.0058,  0.0019,  0.0055, -0.0060, -0.0012,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0001, -0.0001,  0.0000,  0.0001, -0.0002,  0.0000, -0.0001,  0.0000,  0.0000,  0.0001, -0.0000,  0.0000, -0.0001,  0.0002,  0.0000,  0.0001,  0.0001,  0.0000,  0.0000, -0.0000,  0.0000,  0.0000,  0.0000, -0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, -0.0000, -0.0000,  0.0000, -0.0000,  0.0000, -0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.8973,  0.9745, -0.0002, -0.8219,  1.0447, -0.0001,  0.8615, -0.0284,  0.0001, -0.8494,  0.0304,  0.0001,  0.8201, -1.0442, -0.0001, -0.8957, -0.9780, -0.0001, -0.0015,  0.0044,  0.0029, -0.0009, -0.0045,  0.0013,  0.0005,  0.0019,  0.0020,  0.0008, -0.0032,  0.0012,  0.0041,  0.0038,  0.0011,  0.0039, -0.0042, -0.0006,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0303, -0.0304,  0.0000,  0.0262, -0.0353,  0.0000, -0.0284,  0.0014, -0.0000,  0.0277, -0.0017, -0.0000, -0.0259,  0.0352,  0.0000,  0.0302,  0.0309,  0.0000,  0.0004, -0.0005,  0.0004,  0.0003,  0.0009, -0.0006,  0.0001, -0.0002,  0.0005,  0.0000,  0.0003,  0.0005, -0.0005, -0.0005,  0.0005, -0.0005,  0.0008, -0.0005,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0002,  0.0001, -0.0000, -0.0001,  0.0002,  0.0000,  0.0001, -0.0000,  0.0000, -0.0001,  0.0000,  0.0000,  0.0001, -0.0002,  0.0000, -0.0001, -0.0001, -0.0000, -0.0000, -0.0001, -0.0005, -0.0000, -0.0002,  0.0005, -0.0000, -0.0001, -0.0005,  0.0000,  0.0001, -0.0005,  0.0000, -0.0001, -0.0005,  0.0000, -0.0002,  0.0004,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.8843, -0.9619,  0.0002,  0.8109, -1.0295,  0.0001, -0.8494,  0.0277, -0.0001,  0.8377, -0.0295, -0.0001, -0.8093,  1.0290,  0.0001,  0.8827,  0.9651,  0.0001,  0.0013, -0.0040, -0.0029,  0.0007,  0.0041, -0.0013, -0.0005, -0.0017, -0.0019, -0.0008,  0.0030, -0.0012, -0.0038, -0.0034, -0.0010, -0.0037,  0.0038,  0.0006,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0329,  0.0317, -0.0000, -0.0276,  0.0383, -0.0000,  0.0304, -0.0017,  0.0000, -0.0295,  0.0022,  0.0000,  0.0271, -0.0382, -0.0000, -0.0327, -0.0324, -0.0000, -0.0006,  0.0011,  0.0004, -0.0005, -0.0010, -0.0002, -0.0001,  0.0005,  0.0004, -0.0001, -0.0007,  0.0003,  0.0008,  0.0010,  0.0003,  0.0007, -0.0009, -0.0003,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0001,  0.0000, -0.0000, -0.0000,  0.0001,  0.0000,  0.0001, -0.0000,  0.0000, -0.0001,  0.0000,  0.0000,  0.0000, -0.0001,  0.0000, -0.0001, -0.0000,  0.0000, -0.0000,  0.0002,  0.0005, -0.0000,  0.0001, -0.0004,  0.0000,  0.0002,  0.0005, -0.0000, -0.0001,  0.0005,  0.0000,  0.0002,  0.0005,  0.0000,  0.0001, -0.0004,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.8522,  0.9318, -0.0002, -0.7845,  0.9922, -0.0001,  0.8201, -0.0259,  0.0001, -0.8093,  0.0271,  0.0000,  0.7834, -0.9919, -0.0001 ,-0.8509, -0.9342, -0.0001, -0.0007,  0.0029,  0.0027, -0.0002, -0.0029,  0.0012,  0.0007,  0.0012,  0.0018,  0.0009, -0.0023,  0.0012,  0.0030,  0.0024,  0.0009,  0.0028, -0.0027, -0.0006,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -1.0890, -1.1781,  0.0003,  0.9946, -1.2680,  0.0002, -1.0442,  0.0352, -0.0002,  1.0290, -0.0382, -0.0001, -0.9919,  1.2672,  0.0002 , 1.0869,  1.1829,  0.0002,  0.0024, -0.0062, -0.0030,  0.0016,  0.0066, -0.0021, -0.0004, -0.0026, -0.0018, -0.0009,  0.0044, -0.0009, -0.0058, -0.0054, -0.0008, -0.0054,  0.0062,  0.0002,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0001, -0.0001,  0.0000,  0.0001, -0.0002,  0.0000, -0.0001,  0.0000,  0.0000,  0.0001, -0.0000,  0.0000, -0.0001,  0.0002,  0.0000 , 0.0001,  0.0001,  0.0000,  0.0000, -0.0001, -0.0005,  0.0000, -0.0001,  0.0005, -0.0000, -0.0001, -0.0005,  0.0000,  0.0001, -0.0005, -0.0000, -0.0001, -0.0005, -0.0000, -0.0001,  0.0005,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.9342, -1.0106,  0.0003,  0.8532, -1.0876,  0.0001, -0.8957,  0.0302, -0.0001,  0.8827, -0.0327, -0.0001, -0.8509,  1.0869,  0.0001,  0.9323,  1.0148,  0.0002,  0.0021, -0.0054, -0.0031,  0.0014,  0.0055, -0.0014, -0.0003, -0.0024, -0.0020, -0.0007,  0.0038, -0.0012, -0.0049, -0.0047, -0.0011, -0.0046,  0.0052,  0.0006,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -1.0164, -1.1111,  0.0002,  0.9356, -1.1833,  0.0001, -0.9780,  0.0309, -0.0001,  0.9651, -0.0324, -0.0000, -0.9342,  1.1829,  0.0001,  1.0148,  1.1141,  0.0001,  0.0008, -0.0033, -0.0027,  0.0002,  0.0036, -0.0019, -0.0008, -0.0012, -0.0016, -0.0011,  0.0026, -0.0009, -0.0035, -0.0027, -0.0006, -0.0034,  0.0034,  0.0002,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0002, -0.0001,  0.0000,  0.0001, -0.0002,  0.0000, -0.0001,  0.0000, -0.0000,  0.0001, -0.0000,  0.0000, -0.0001,  0.0002,  0.0000,  0.0002,  0.0001,  0.0000,  0.0000, -0.0000,  0.0000,  0.0000,  0.0000, -0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000, -0.0000, -0.0000,  0.0000, -0.0000,  0.0000, -0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0021, -0.0005,  0.0000,  0.0008, -0.0025,  0.0000, -0.0015,  0.0004, -0.0000,  0.0013, -0.0006, -0.0000, -0.0007,  0.0024,  0.0000,  0.0021,  0.0008,  0.0000,  0.0004,  0.0045,  0.0170,  0.0004,  0.0055, -0.0154,  0.0003,  0.0049,  0.0174, -0.0000, -0.0028,  0.0175, -0.0001,  0.0047,  0.0170, -0.0001,  0.0055, -0.0153,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0055,  0.0032, -0.0002, -0.0032,  0.0066, -0.0000,  0.0044, -0.0005, -0.0001, -0.0040,  0.0011,  0.0002,  0.0029, -0.0062, -0.0001, -0.0054, -0.0033, -0.0000,  0.0045,  0.1789,  0.6405,  0.0064,  0.1865, -0.5859,  0.0060,  0.1866,  0.6546, -0.0029, -0.1204,  0.6499,  0.0074,  0.1846,  0.6412,  0.0060,  0.1867, -0.5814,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0031,  0.0037, -0.0005, -0.0027,  0.0041,  0.0000,  0.0029,  0.0004, -0.0005, -0.0029,  0.0004,  0.0005,  0.0027, -0.0030, -0.0005, -0.0031, -0.0027,  0.0000,  0.0170,  0.6405,  2.3448,  0.0239,  0.6727, -2.1399,  0.0217,  0.6697,  2.3969, -0.0112, -0.4468,  2.3639,  0.0243,  0.6614,  2.3485,  0.0196,  0.6733, -2.1226,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0014, -0.0000,  0.0000,  0.0003, -0.0017,  0.0000, -0.0009,  0.0003, -0.0000,  0.0007, -0.0005, -0.0000, -0.0002,  0.0016,  0.0000,  0.0014,  0.0002,  0.0000,  0.0004,  0.0064,  0.0239,  0.0004,  0.0074, -0.0217,  0.0003,  0.0069,  0.0244, -0.0001, -0.0042,  0.0244,  0.0000,  0.0066,  0.0239, -0.0000,  0.0074, -0.0216,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0056, -0.0029, -0.0001,  0.0032, -0.0064,  0.0000, -0.0045,  0.0009, -0.0002,  0.0041, -0.0010,  0.0001, -0.0029,  0.0066, -0.0001,  0.0055,  0.0036,  0.0000,  0.0055,  0.1865,  0.6727,  0.0074,  0.1971, -0.6156,  0.0066,  0.1952,  0.6876, -0.0030, -0.1257,  0.6826,  0.0067,  0.1925,  0.6735,  0.0054,  0.1973, -0.6109,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0013,  0.0009,  0.0005, -0.0012,  0.0011, -0.0000,  0.0013, -0.0006,  0.0005, -0.0013, -0.0002, -0.0004,  0.0012, -0.0021,  0.0005, -0.0014, -0.0019, -0.0000, -0.0154, -0.5859, -2.1399, -0.0217, -0.6156,  1.9640, -0.0196, -0.6127, -2.1878,  0.0104,  0.4085, -2.1598, -0.0221, -0.6050, -2.1436, -0.0177, -0.6162,  1.9479,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0003,  0.0009,  0.0000, -0.0007,  0.0004,  0.0000,  0.0005,  0.0001, -0.0000, -0.0005, -0.0001,  0.0000,  0.0007, -0.0004, -0.0000, -0.0003, -0.0008,  0.0000,  0.0003,  0.0060,  0.0217,  0.0003,  0.0066, -0.0196,  0.0003,  0.0064,  0.0221, -0.0001, -0.0039,  0.0221,  0.0002,  0.0062,  0.0217,  0.0001,  0.0066, -0.0195,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0024,  0.0014, -0.0001, -0.0013,  0.0030,  0.0000,  0.0019, -0.0002, -0.0001, -0.0017,  0.0005,  0.0002,  0.0012, -0.0026, -0.0001, -0.0024, -0.0012,  0.0000,  0.0049,  0.1866,  0.6697,  0.0069,  0.1952, -0.6127,  0.0064,  0.1948,  0.6845, -0.0030, -0.1257,  0.6795,  0.0074,  0.1925,  0.6705,  0.0060,  0.1954, -0.6080,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0021,  0.0027, -0.0005, -0.0018,  0.0029,  0.0000,  0.0020,  0.0005, -0.0005, -0.0019,  0.0004,  0.0005,  0.0018, -0.0018, -0.0005, -0.0020, -0.0016,  0.0000,  0.0174,  0.6546,  2.3969,  0.0244,  0.6876, -2.1878,  0.0221,  0.6845,  2.4501, -0.0115, -0.4568,  2.4163,  0.0248,  0.6760,  2.4007,  0.0200,  0.6882, -2.1701,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0007,  0.0011,  0.0000, -0.0009,  0.0008,  0.0000,  0.0008,  0.0000,  0.0000, -0.0008, -0.0001, -0.0000,  0.0009, -0.0009,  0.0000, -0.0007, -0.0011,  0.0000, -0.0000, -0.0029, -0.0112, -0.0001, -0.0030,  0.0104, -0.0001, -0.0030, -0.0115,  0.0001,  0.0023, -0.0111, -0.0001, -0.0030, -0.0112, -0.0001, -0.0030,  0.0103,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0039, -0.0026,  0.0001,  0.0025, -0.0047,  0.0000, -0.0032,  0.0003,  0.0001,  0.0030, -0.0007, -0.0001, -0.0023,  0.0044,  0.0001,  0.0038,  0.0026,  0.0000, -0.0028, -0.1204, -0.4468, -0.0042, -0.1257,  0.4085, -0.0039, -0.1257, -0.4568,  0.0023,  0.0870, -0.4480, -0.0048, -0.1243, -0.4477, -0.0038, -0.1259,  0.4050,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0013,  0.0020, -0.0005, -0.0012,  0.0020,  0.0000,  0.0012,  0.0005, -0.0005, -0.0012,  0.0003,  0.0005,  0.0012, -0.0009, -0.0005, -0.0012, -0.0009,  0.0000,  0.0175,  0.6499,  2.3639,  0.0244,  0.6826, -2.1598,  0.0221,  0.6795,  2.4163, -0.0111, -0.4480,  2.3899,  0.0248,  0.6711,  2.3673,  0.0200,  0.6832, -2.1427,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0050,  0.0032, -0.0000, -0.0032,  0.0058, -0.0000,  0.0041, -0.0005,  0.0000, -0.0038,  0.0008,  0.0000,  0.0030, -0.0058, -0.0000, -0.0049, -0.0035, -0.0000, -0.0001,  0.0074,  0.0243,  0.0000,  0.0067, -0.0221,  0.0002,  0.0074,  0.0248, -0.0001, -0.0048,  0.0248,  0.0006,  0.0075,  0.0243,  0.0006,  0.0067, -0.0219,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0048,  0.0026, -0.0002, -0.0027,  0.0058, -0.0000,  0.0038, -0.0005, -0.0001, -0.0034,  0.0010,  0.0002,  0.0024, -0.0054, -0.0001, -0.0047, -0.0027, -0.0000,  0.0047,  0.1846,  0.6614,  0.0066,  0.1925, -0.6050,  0.0062,  0.1925,  0.6760, -0.0030, -0.1243,  0.6711,  0.0075,  0.1904,  0.6622,  0.0061,  0.1927, -0.6004,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0012,  0.0016, -0.0005, -0.0009,  0.0019,  0.0000,  0.0011,  0.0005, -0.0005, -0.0010,  0.0003,  0.0005,  0.0009, -0.0008, -0.0005, -0.0011, -0.0006,  0.0000,  0.0170,  0.6412,  2.3485,  0.0239,  0.6735, -2.1436,  0.0217,  0.6705,  2.4007, -0.0112, -0.4477,  2.3673,  0.0243,  0.6622,  2.3523,  0.0196,  0.6741, -2.1263,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0047,  0.0031, -0.0000, -0.0031,  0.0055, -0.0000,  0.0039, -0.0005,  0.0000, -0.0037,  0.0007,  0.0000,  0.0028, -0.0054, -0.0000, -0.0046, -0.0034, -0.0000, -0.0001,  0.0060,  0.0196, -0.0000,  0.0054, -0.0177,  0.0001,  0.0060,  0.0200, -0.0001, -0.0038,  0.0200,  0.0006,  0.0061,  0.0196,  0.0005,  0.0054, -0.0176,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0053, -0.0027, -0.0001,  0.0030, -0.0060,  0.0000, -0.0042,  0.0008, -0.0002,  0.0038, -0.0009,  0.0001, -0.0027,  0.0062, -0.0001,  0.0052,  0.0034,  0.0000,  0.0055,  0.1867,  0.6733,  0.0074,  0.1973, -0.6162,  0.0066,  0.1954,  0.6882, -0.0030, -0.1259,  0.6832,  0.0067,  0.1927,  0.6741,  0.0054,  0.1974, -0.6115,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
// -0.0007, -0.0012,  0.0004,  0.0006, -0.0012, -0.0000, -0.0006, -0.0005,  0.0004,  0.0006, -0.0003, -0.0004, -0.0006,  0.0002,  0.0005,  0.0006,  0.0002, -0.0000, -0.0153, -0.5814, -2.1226, -0.0216, -0.6109,  1.9479, -0.0195, -0.6080, -2.1701,  0.0103,  0.4050, -2.1427, -0.0219, -0.6004, -2.1263, -0.0176, -0.6115,  1.9319,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1000000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1000000,  0.0000,  0.0000,  0.0000,  0.0000,
//  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1000000,  0.0000,  0.0000,  0.0000,
//  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1000000,  0.0000,  0.0000,
//  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1000000,  0.0000,
//  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  1000000;


    // double zoomFactor = 0.000001;
    double zoomFactor = 1;

    _RInit = _RInit * zoomFactor;
    _Rdig.setOnes();
    _Rdig = _Rdig * 0.0001 * zoomFactor;
    // _Rdig = _Rdig * 0.0001 ;
    _RasD = _Rdig.asDiagonal();
    _RInit = _RInit + _RasD;

    _Cu.setZero();
    // _Cu << 0.5359,   5.3789,   9.1532,
    // 5.3789,  55.3909,  94.1490,
    // 9.1532,  94.1490, 177.4668;
    _Cu = _Cu * zoomFactor;
    _Qdig.setOnes();
    _Qdig = _Qdig * 0.0001 * zoomFactor;
    // _Qdig(3) = 1 * zoomFactor;
    // _Qdig(4) = 1 * zoomFactor;
    _Qdig(5) = 1 * zoomFactor;
    // _Qdig = _Qdig * 0.0001 ;
    _QInit = _Qdig.asDiagonal();
    _QInit +=  _B * _Cu * _B.transpose();// 参考书本(7.83)

    _QInit = _QInit * 1;

    // // // std::cout<<" _RInit:\n "<< _RInit << std::endl;
    // // // std::cout<<" _QInit:\n "<< _QInit << std::endl;
    // /* --------------------------lcc:end -------------------------- */

    _RCheck  = new AvgCov(42, _estName + " R");
    _uCheck  = new AvgCov(3,  _estName + " u");

    _vxFilter = new LPFilter(_dt, 3.0);
    _vyFilter = new LPFilter(_dt, 3.0);
    _vzFilter = new LPFilter(_dt, 3.0);

    /* ROS odometry publisher */
    #ifdef COMPILE_WITH_MOVE_BASE
        _pub = _nh.advertise<nav_msgs::Odometry>("odom", 1);
    #endif  // COMPILE_WITH_MOVE_BASE
}

void Estimator::run(){
    // _feetH.setZero();
    // _feetPosGlobalKine = _sixlegdogModel->getFeet2BPositions(*_lowState, FrameType::GLOBAL);
    // _feetVelGlobalKine = _sixlegdogModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);

    // _Q = _QInit;
    // _R = _RInit;

    // for(int i(0); i < 6; ++i){
    //     if((*_contact)(i) == 0){
    //         _Q.block(6+3*i, 6+3*i, 3, 3) = _largeVariance * I3;
    //         _R.block(18+3*i, 18+3*i, 3, 3) = _largeVariance * I3;
    //         _R(36+i, 36+i) = _largeVariance;
    //     }
    //     else{
    //         _trust = windowFunc((*_phase)(i), 0.2);
    //         _Q.block(6+3*i, 6+3*i, 3, 3) = (1 + (1-_trust)*_largeVariance) * _QInit.block(6+3*i, 6+3*i, 3, 3);
    //         _R.block(18+3*i, 18+3*i, 3, 3) = (1 + (1-_trust)*_largeVariance) * _RInit.block(18+3*i, 18+3*i, 3, 3);
    //         _R(36+i, 36+i) = (1 + (1-_trust)*_largeVariance) * _RInit(36+i, 36+i);
    //     }
    //     _feetPos2Body.segment(3*i, 3) = _feetPosGlobalKine.col(i);
    //     _feetVel2Body.segment(3*i, 3) = _feetVelGlobalKine.col(i);
    // }

    // // std::cout<<" (*_phase):\n "<< (*_phase).transpose() << std::endl;
    // // std::cout<<" (*_contact):\n "<< (*_contact).transpose() << std::endl;
    // // std::cout<<" _Q:\n "<< _Q << std::endl;
    // // std::cout<<" _R:\n "<< _R << std::endl;
    // // std::cout<<" _R:\n "<< _R << std::endl;
    // // std::cout<<" _feetPos2Body:\n "<< _feetPos2Body.transpose() << std::endl;
    // // std::cout<<" _feetVel2Body:\n "<< _feetVel2Body.transpose() << std::endl;


    // _rotMatB2G = _lowState->getRotMat();
    // // _u = _rotMatB2G * _lowState->getAcc() + _g;
    // _u = _rotMatB2G * _lowState->getAcc();

    // //lcc 20240604
    // // if ( _lowState->userFunctionMode.function_test == true ){
    // //     accOffset = -_u;
    // // }
    // // _u = _u + accOffset;

    // _xhat = _A * _xhat + _B * _u;
    // _yhat = _C * _xhat;
    // _y << _feetPos2Body, _feetVel2Body, _feetH;

    // // _RCheck->measure(_y);//lcc 20250602
    // // _uCheck->measure(_u);//lcc 20250602
    // // std::cout<<" _y:\n "<< _y << std::endl;
    // // std::cout<<" _u:\n "<< _u << std::endl;

    // _Ppriori = _A * _P * _A.transpose() + _Q;
    // _S =  _R + _C * _Ppriori * _C.transpose();
    // _Slu = _S.lu();
    // _Sy = _Slu.solve(_y - _yhat);
    // _Sc = _Slu.solve(_C);
    // _SR = _Slu.solve(_R);
    // _STC = (_S.transpose()).lu().solve(_C);
    // _IKC = I24 - _Ppriori*_C.transpose()*_Sc;

    // _xhat += _Ppriori * _C.transpose() * _Sy;
    // _P =  _IKC * _Ppriori * _IKC.transpose()
    //     + _Ppriori * _C.transpose() * _SR * _STC * _Ppriori.transpose();

    // // //lcc 20240604
    // if ( _lowState->userFunctionMode.state_reset == true ){
    //     postionOffset = -_xhat.segment(0, 3) - Vec3(0, 0, _robModel-> _feetPosNormalStand(2));// 只有站起来才可以用
    //     // velocityOffset = -_xhat.segment(3, 3);
    //     // printf(" adadadada\n");
    // }
    // // // std::cout<<" getPosition(): "<< getPosition().transpose() << std::endl;
    // // // std::cout<<" getVelocity():\n "<< getVelocity().transpose() << std::endl;
    // // // std::cout<<" _u:\n "<< _u << std::endl;
    // // // std::cout<<" ODE_P:\n "<< ODE_P << std::endl;

    // //lcc 20240603
    // // std::cout<<" x:\n "<< _xhat.segment(0, 3).transpose() << std::endl;
    // // std::cout<<" v:\n "<< _xhat.segment(3, 3).transpose() << std::endl;

    // // _xhat.segment(0, 3) = ODE_P;
    // // _xhat.segment(3, 3) = ODE_V;

    // lcc 20240829: 纯腿足里程计，通过 body_est_vel 来估算是 world系 下的位置。 
    _posBody_estByVelBody = _posBody_estByVelBody + _dt * getVelocity();
    Vec6 leg_deep;
    int leg_deep_num;
    leg_deep_num = 0;
    leg_deep.setZero();
    for (int i = 0; i < 6; i++){   
        if((*_contact)(i) == 1) { //stand
            leg_deep(i) = _sixlegdogModel->getFootPosition(*_lowState, i, FrameType::BODY)(2);
            leg_deep_num ++;
        }
    }
    // if( (*_phase)(0) > 0.05 && (*_phase)(0) <= 0.975 ){
        if( leg_deep_num != 0 )
        // _posBody_estByVelBody_z = -(leg_deep(0) + leg_deep(1) + leg_deep(2) + leg_deep(3) + leg_deep(4) + leg_deep(5) )/leg_deep_num + 0.0944;
        _posBody_estByVelBody_z = -(leg_deep(0) + leg_deep(1) + leg_deep(2) + leg_deep(3) + leg_deep(4) + leg_deep(5) )/leg_deep_num;
    // }
    _posBody_estByVelBody(2) = _posBody_estByVelBody_z;
    // std::cout<<" _dt"<< _dt <<std::endl;
    // std::cout<<" getVelocity()"<< getVelocity().transpose() <<std::endl;
    // std::cout<<" _posBody_estByVelBody:\n "<< _posBody_estByVelBody.transpose() << std::endl;
}

//返回机器人中心的当前位置
Vec3 Estimator::getPosition(){
    
    // return _xhat.segment(0, 3) + Vec3(postionOffset(0), postionOffset(1), 0); //lcc 20240604

    // return _xhat.segment(0, 3); //lcc 20240604

    // Vec3 z3;
    // z3.setZero();
    // return z3; //lcc 20240621  摆脱状态估计的依赖->_velbody

    // lcc 20240829: 纯腿足里程计，通过 body_est_vel 来估算是 world系 下的位置。 
    return _posBody_estByVelBody;
}

// //返回机器人中心的当前速度 lcc修改了 当前版本（基于足端速度估计机器人质心速度）
// Vec3 Estimator::getVelocity(){
//     // return _xhat.segment(3, 3) + velocityOffset; //lcc 20240604

//     // Vec3 z3;
//     // z3.setZero();
//     // return z3; //lcc 20240621  摆脱状态估计的依赖->_velbody

//     //lcc 20240622, 一个简单的:足端->质心速度估计
//     int leg_num;
//     leg_num = 0;
//     Vec36 feetVel = _sixlegdogModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);
//     // Vec36 feetVel = _sixlegdogModel->getFeet2BVelocities(*_lowState, FrameType::BODY);
//     body_est_vel.setZero();
//     for (int i = 0; i < 6; i++){
//         if ( (*_contact)(i) == 1 && (*_phase)(i) > 0.05 && (*_phase)(i) <= 0.975 ){
//             leg_num ++;
//             body_est_vel = body_est_vel + feetVel.col(i);
//         }
//     }
//     // if ( (*_contact)(0) == 1 && (*_contact)(1) == 1 && (*_contact)(2) == 1 && (*_contact)(3) == 1 && (*_contact)(4) == 1 && (*_contact)(5) == 1)
//     // {
//     //     body_est_vel.setZero();
//     // }
    
//     if( leg_num != 0){
//         body_est_vel = -body_est_vel/leg_num;
//     }

//     // std::cout<<" (*_contact) :\n"<< (*_contact).transpose() <<std::endl;
//     // std::cout<<" (*_phase) :\n"<< (*_phase).transpose() <<std::endl;

//     // std::cout<<" body_est_vel :\n"<< body_est_vel.transpose() <<std::endl;
//     // std::cout<<" leg_num :"<< leg_num <<std::endl;

//     return body_est_vel; //lcc 20240621  摆脱状态估计的依赖->_velbody

//     //origing
//     // return _xhat.segment(3, 3) ; //lcc 20240604
// }


/* wjw 2025.3.17
优化：坐标系转换：获取足端相对身体的速度后，转换到全局坐标系，提高兼容性。
优化支撑相判断：确保仅在稳定接触阶段参与计算，避免短暂接触带来的误差。
低通滤波：增加滤波平滑处理，减少瞬时波动，提高估计稳定性。
如果有特殊需求，可以调整滤波系数 alpha 来控制平滑程度。*/
Vec3 Estimator::getVelocity(){
    int leg_num = 0;
    
    // 获取足端相对身体的速度（BODY坐标系下）
    Vec36 feetVel = _sixlegdogModel->getFeet2BVelocities(*_lowState, FrameType::BODY);
    
    // // 转换到全局坐标系
    // Mat3 R = _lowState->getRotationMatrix();
    // for (int i = 0; i < 6; i++) {
    //     feetVel.col(i) = R * feetVel.col(i);
    // }
    
    body_est_vel.setZero();
    
    // 计算支撑相足端速度均值
    for (int i = 0; i < 6; i++){
        if ((*_contact)(i) == 1 && (*_phase)(i) > 0.05 && (*_phase)(i) <= 0.975){
            leg_num++;
            body_est_vel += feetVel.col(i);
        }
    }
    
    // 计算质心速度
    if (leg_num != 0) {
        body_est_vel = -body_est_vel / leg_num;
    }
    
    // 低通滤波平滑速度估计
    static Vec3 prev_vel = Vec3::Zero();
    double alpha = 0.8; // 滤波系数（0.8 表示新值占 80%）
    body_est_vel = alpha * prev_vel + (1 - alpha) * body_est_vel;
    prev_vel = body_est_vel;
    
    return body_est_vel;
}


//返回i号足端在世界坐标系下位置
Vec3 Estimator::getFootPos(int i){
    // return getPosition() + _lowState->getRotMat() * _robModel->getFootPosition(*_lowState, i, FrameType::BODY);
    return getPosition() + _lowState->getRotMat() * _sixlegdogModel->getFootPosition(*_lowState, i, FrameType::BODY);
}   //getPosition():世界系下机身位置     机身转到世界系下的旋转矩阵*足端在机身系下的位置

//返回所有足端在世界坐标系下位置，相当于执行了六次 getFootPos(int i)
Vec36 Estimator::getFeetPos(){
    Vec36 feetPos;
    for(int i(0); i < 6; ++i){
        feetPos.col(i) = getFootPos(i);
    }
    return feetPos;
}

//返回所有足端在世界坐标系下的速度向量
Vec36 Estimator::getFeetVel(){
    // Vec34 feetVel = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);
    Vec36 feetVel = _sixlegdogModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);
    for(int i(0); i < 6; ++i){
        feetVel.col(i) += getVelocity();
    }
    return feetVel;
}

//返回所有足端在世界坐标系下相对于机身中心的位置
Vec36 Estimator::getPosFeet2BGlobal(){
    Vec36 feet2BPos;
    for(int i(0); i < 6; ++i){
        feet2BPos.col(i) = getFootPos(i) - getPosition();
    }
    return feet2BPos;
}

